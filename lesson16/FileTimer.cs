/// <summary>
/// Reads and writes dates to a certain file 
/// </summary>
public class FileTimer
{
/// <summary>
/// full path to a file to work with. By default it's generated by the program
/// in the project root directory with a 'FileTimer_{username}_data' name
/// </summary>
    public string FilePath { get; private set; }

    /// <summary>
    /// all the dates that a certain file contains
    /// </summary>
    private List<DateTime> _dates = new List<DateTime>();

    /// <summary>
    /// contains single-character commands and the methods for them
    /// </summary>
    private readonly Dictionary<char, Action> _options;

    /// <summary>
    /// Initializes the commands and sets a default path to the file.
    /// If you want to save data in a specific file, use the 'o' command
    /// to change it
    /// </summary>
    public FileTimer()
    {
        FilePath = $"FileTimer_{Environment.UserName}_data.txt";

        _options = new Dictionary<char, Action>()
        {
            ['r'] = UseRead,
            ['o'] = TryUseOpen,
            ['l'] = UseLeave,
            ['s'] = TryUseSave,
            ['u'] = UseUpdate,
            ['i'] = UseInfo
        };
    }

    /// <summary>
    /// Prints a standard greeting message
    /// </summary>
    public static void PrintWelcomeMessage()
    {
        var initialColor = Console.ForegroundColor;

        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("Welcome to our file timer!");
        Console.WriteLine("You can read/update data about something you do");
        Console.WriteLine("For example: reading or not smoking time");
        Console.WriteLine("Write one of the following options you want to\n");
        Console.ForegroundColor = initialColor;
    }

    /// <summary>
    /// Prints all the possible commands user can enter
    /// </summary>
    public static void PrintOptions()
    {
        var initialColor = Console.ForegroundColor;
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine("Option:\tr  -- read all data");
        Console.ForegroundColor = ConsoleColor.Blue;
        Console.WriteLine("Option:\ti  -- get information about the program");
        Console.ForegroundColor = ConsoleColor.Blue;
        Console.WriteLine("Option:\tu  -- update your current state");
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("Option:\ts  -- save all the changes");
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("Option:\tl  -- leave the program");
        Console.ForegroundColor = ConsoleColor.Gray;
        Console.WriteLine("Option:\to  -- open a new file\n");
        Console.ForegroundColor = initialColor;
    }

    /// <summary>
    /// Defines the behaviour for the 'o' command.
    /// Gets an input from console and if it's valid, the file path is changed
    /// and the dates in the _dates list are also changed.
    /// If reading user input failed, the file stays the same as before.
    /// </summary>
    public void UseOpen()
    {
        Console.Write("Provide the full path to your file: ");

        var input = Console.ReadLine();

        if (string.IsNullOrEmpty(input))
        {
            ConsoleMessager.WriteError($"Invalid file name {input}");
            return;
        }

        FilePath = input;

        using (var sr = new StreamReader(FilePath))
        {
            string[] dates = sr.ReadToEnd().Split('\n');

            _dates = new List<DateTime>(dates.Length);

            foreach (var date in dates)
            {
                if (string.IsNullOrEmpty(date)) continue;

                try
                {
                    _dates.Add(DateTime.Parse(date));
                }
                catch (Exception)
                {
                    Console.WriteLine(date);
                    ConsoleMessager.WriteError($"Failed to parse {FilePath} because it has a non-valid structure");
                    return;
                }
            }
        }
    }

    /// <summary>
    /// Does the same this as UseOpen method but if some errors happaned, they're catched
    /// </summary>
    public void TryUseOpen()
    {
        try
        {
            UseOpen();
            ConsoleMessager.WriteSuccess($"Successfuly opened and parsed the file {FilePath}");
        }
        catch (Exception)
        {
            ConsoleMessager.WriteError($"Couldn't open the {FilePath}. Name is invalid");
        }
    }

    /// <summary>
    /// Adds a new date to the private list of dates. By itself,
    /// it doesn't add a date to the file. Use the command 's'
    /// if you want to save all the changes
    /// </summary>
    public void UseUpdate() => _dates.Add(DateTime.Now);

    /// <summary>
    /// Rewrites the file and adds new dates to it. If provided file doesn't
    /// exists, it generates it and writes the dates there
    /// </summary>
    public void UseSave()
    {
        using (var sw = new StreamWriter(FilePath))
        {
            var result = "";
            var size = _dates.Count;

            for (int i = 0; i < size; i++)
            {
                result += _dates[i].ToString();

                if (i != size - 1)
                {
                    result += '\n';
                }
            }

            sw.WriteLine(result);

            ConsoleMessager.WriteSuccess($"All the changes are applied to the {FilePath}");
        }
    }

    /// <summary>
    /// Does the same as UseSave method but if some error occured, it's catched
    /// </summary>
    public void TryUseSave()
    {
        try
        {
            UseSave();
        }
        catch (Exception)
        {
            ConsoleMessager.WriteError($"Failed to save data to the {FilePath}");
        }
    }

    /// <summary>
    /// Reads all the dates from the private list of dates. 
    /// And prints all the dates in pairs as time spent between them
    /// </summary>
    public void UseRead()
    {
        for (int i = 1; i < _dates.Count; i += 2)
        {
            var difference = _dates[i] - _dates[i - 1];

            var hours = string.Format("{0:0.00}", difference.TotalHours);
            var days = string.Format("{0:0.00}", difference.TotalDays);
            var years = string.Format("{0:0.00}", difference.TotalDays / 365);

            Console.WriteLine(_dates[i - 1]);
            Console.WriteLine(_dates[i]);
            Console.WriteLine($"{hours}h {days}d {years}ys\n");
        }
    }

    /// <summary>
    /// stops executing the program
    /// </summary>
    public void UseLeave() => Environment.Exit(0);

    /// <summary>
    /// prints the information about the program and the commands
    /// </summary>
    public void UseInfo()
    {
        Console.WriteLine("This is a program for tracking time");
        Console.WriteLine("It works by setting a start date and then updating it with a new one");
        Console.WriteLine("The difference is then calculated and shown");
        Console.WriteLine("You can use it to track time of something. For example not smoking time");
        Console.WriteLine("To do it you have to open a file using the 'o' command and provide the file name");
        Console.WriteLine("If you don't do it, program will generate a default file in the same directory");
        Console.WriteLine("Then you can start working. Use the 'u' command to add today date");
        Console.WriteLine("Use the 'r' command to print all the dates and find time");
        Console.WriteLine("Use the 'l' command to stop the execution");
        Console.WriteLine("And finally, use the 's' command to save all the changes you've done using the 'u' command to your file");
        Console.WriteLine("If you don't do it, your file won't change");
        Console.WriteLine("Have fun!");
    }

    /// <summary>
    /// reads input from the user and calls the entered commands if the input is valid
    /// </summary>
    public void ReadLine()
    {
        Console.Write("> ");

        string? userInput = Console.ReadLine();

        if (string.IsNullOrEmpty(userInput))
        {
            ConsoleMessager.WriteError("Failed to read input data from user");
            return;
        }

        if (_options.TryGetValue(userInput[0], out var value))
        {
            value();
            return;
        }

        ConsoleMessager.WriteError($"The command {userInput[0]} is not defined");
    }
}